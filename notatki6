import java.util.*;

public class Main {

    // A1 - Metoda wypisująca unikalne elementy z kolekcji
    public static <T> void printUnique(Collection<T> items)
    {
        // Tworzymy zbiór (Set), aby przechowywać tylko unikalne elementy
        Set<T> uniqueElements = new HashSet<T>(items);
        // Iterujemy przez zbiór i wypisujemy elementy
        for(T item : uniqueElements)
        {
            System.out.println(item);
        }
    }

    // A2 - Metoda łącząca dwie listy w jedną
    public static <T> ArrayList<T> mergeLists(ArrayList<T> list1, ArrayList<T> list2)
    {
        // Tworzymy nową listę do przechowywania połączonych elementów
        ArrayList<T> merged = new ArrayList<>();
        // Dodajemy elementy pierwszej listy
        merged.addAll(list1);
        // Dodajemy elementy drugiej listy
        merged.addAll(list2);

        // Zwracamy połączoną listę
        return merged;
    }

    // A3 - Metoda usuwająca co drugi element z kolekcji (błędna logika poprawiona poniżej)
    public static <T> void removeEveryOther(Collection<T> items)
    {
        // Tworzymy iterator, aby iterować po kolekcji i usuwać elementy
        Iterator<T> iterator = items.iterator();
        boolean keep = true; // Flaga decydująca, czy zachować dany element

        while (iterator.hasNext())
        {
            iterator.next(); // Przechodzimy do następnego elementu
            if (!keep)
            {
                iterator.remove(); // Usuwamy element, jeśli flaga jest false
            }
            keep = !keep; // Zmieniamy wartość flagi (true -> false -> true itd.)
        }
    }

    // B1 - Metoda wypisująca elementy w odwrotnej kolejności
    public static <T> void reversePrint(Iterable<T> items)
    {
        // Tworzymy listę, aby zebrać elementy
        List<T> tempList = new ArrayList<>();
        for (T item : items)
        {
            tempList.add(item); // Dodajemy elementy do tymczasowej listy
        }

        // Wypisujemy elementy od końca
        ListIterator<T> iterator = tempList.listIterator(tempList.size());
        while (iterator.hasPrevious())
        {
            System.out.println(iterator.previous());
        }
    }

    // F1 - Metoda znajdująca elementy w przedziale w TreeSet
    public static <T extends Comparable<T>> TreeSet<T> findElementsInRange(TreeSet<T> set, T lowerBound, T upperBound)
    {
        // Tworzymy nowy TreeSet zawierający tylko elementy w przedziale [lowerBound, upperBound]
        TreeSet<T> treeSet = new TreeSet<>(set.subSet(lowerBound, true, upperBound, true));

        // Zwracamy wynikowy TreeSet
        return treeSet;
    }

    public static void main(String[] args)
    {
        // Przykład użycia metody F1
        int lowerBound = 9;
        int upperBound = 20;
        TreeSet<Integer> treeSet = new TreeSet<>();
        treeSet.add(20);
        treeSet.add(12);
        treeSet.add(3);
        treeSet.add(9);
        treeSet.add(21);

        System.out.println(findElementsInRange(treeSet, lowerBound, upperBound));

        // Przykład użycia metody A3
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        list.add(1);
        list.add(2);

        // Usuwamy co drugi element z listy
        removeEveryOther(list);
        System.out.println(list); // Wyświetlamy zmodyfikowaną listę

        // Przykład użycia metody B1
        ArrayList<String> words = new ArrayList<>();
        words.add("Java");
        words.add("is");
        words.add("awesome");

        System.out.println("Reversed:");
        reversePrint(words);

        // Przykład użycia metody A2
        ArrayList<Integer> list1 = new ArrayList<>();
        list1.add(7);
        list1.add(8);
        list1.add(9);
        list1.add(6);

        ArrayList<Integer> list2 = new ArrayList<>();
        list2.add(10);
        list2.add(11);

        System.out.println("Merged List:");
        System.out.println(mergeLists(list1, list2));
    }
}
